// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(cuid())
  email          String?        @unique
  name           String         @unique
  password       String?
  avatar         String?
  subscriptionId String?
  subscription   subscriptions?
  customer       customers?
  githubId       Int?           @unique
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model subscriptions {
  subscriptionId         String              @id @default(uuid())
  providerSubscriptionId String?
  userId                 String              @unique
  planType               PlanType
  user                   User                @relation(fields: [userId], references: [id])
  status                 SubscriptionStatus? // trialing, active, canceled, incomplete, incomplete_expired, past_due, unpaid, paused
  quantity               Int?
  priceId                String?
  price                  prices?             @relation(fields: [priceId], references: [id])
  cancelAtPeriodEnd      Boolean             @default(false)
  currentPeriodStart     DateTime?
  currentPeriodEnd       DateTime?
  endedAt                DateTime?
  cancelAt               DateTime?
  canceledAt             DateTime?
}

model customers {
  id         String @id @default(uuid())
  customerId String
  userId     String @unique
  user       User   @relation(fields: [userId], references: [id])
}

model products {
  id          String   @id @default(uuid())
  productId   String   @unique
  active      Boolean  @default(true)
  name        String
  description String?
  prices      prices[]
}

model prices {
  id                  String              @id @default(uuid())
  priceId             String              @unique
  productId           String
  product             products            @relation(fields: [productId], references: [id])
  description         String?
  unitAmount          Int
  currency            String
  pricingType         PricingType // one_time, recurring
  pricingPlanInterval PricingPlanInterval // day, week, month, year
  intervalCount       Int
  subscription        subscriptions[]
  type                PlanType // basic, pro
}

enum PlanType {
  basic
  pro
}

enum PricingType {
  one_time
  recurring
}

enum PricingPlanInterval {
  day
  week
  month
  year
}

enum SubscriptionStatus {
  trialing
  active
  canceled
  incomplete
  incomplete_expired
  past_due
  unpaid
  paused
}
