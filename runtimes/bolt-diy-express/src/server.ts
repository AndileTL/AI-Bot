import { createRequestHandler, } from "@remix-run/express";
import express from 'express';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

// ESM __dirname equivalent
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const PORT = process.env.PORT || 5173;



// Initialize Express app with middleware
const expressApp = express();

// Serve static files from the client build directory
const clientBuildPath = join(__dirname, '../../../build/client');
expressApp.use(express.static(clientBuildPath, { immutable: true, maxAge: '1y' }));

// Handle all other routes with Remix
try {
    // Import the Remix build using dynamic import()
    // const buildPath = join('.', '../build/server/index.js');
    const buildPath = '../../../build/server/index.js';
    // console.log('Loading Remix build from:', buildPath);
    // @ts-ignore because the server build file is generated by `remix vite:build`
    const remixBuild = await import(buildPath);

    // Add the Remix handler after build is loaded
    expressApp.all(
        "*",
        createRequestHandler({
            build: remixBuild as unknown as any,
            mode: process.env.NODE_ENV

        })
    );
    const newServer = expressApp.listen(PORT, () => {
        console.log(`Express server running on port ${PORT}`);

    });
    newServer.on('error', (error: any) => {
        console.error(error);
    });
} catch (error) {
    console.error('Failed to initialize server:', error);
    throw error;
}
